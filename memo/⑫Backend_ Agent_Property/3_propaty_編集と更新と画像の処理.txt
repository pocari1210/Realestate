
3_propaty_編集と更新と画像の処理

◆ルートの編集◆

ディレクトリ
\routes\web.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  Route::controller(AgentPropertyController::class)->group(function () {

    // Agent:プロパティの編集処理のルート
    Route::get('/agent/edit/property/{id}', 'AgentEditProperty')
      ->name('agent.edit.property');

    // Agent:プロパティの更新処理のルート
    Route::post('/agent/update/property', 'AgentUpdateProperty')
      ->name('agent.update.property');

    // 画像の更新の更新ルート
    Route::post('/agent/update/property/thambnail', 'AgentUpdatePropertyThambnail')
      ->name('agent.update.property.thambnail');

    // 複数画像の更新のルート
    Route::post('/agent/update/property/multiimage', 'AgentUpdatePropertyMultiimage')
      ->name('agent.update.property.multiimage');

    // 複数画像の削除のルート
    Route::get('/agent/property/multiimg/delete/{id}', 'AgentPropertyMultiimgDelete')
      ->name('agent.property.multiimg.delete');


/////////////////////////////////////////////////////////////////////////////////////////////////

◆ビューの編集(遷移元)◆

ディレクトリ
\resources\views\agent\property\all_property.blade.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

<a href="{{ route('agent.edit.property',$item->id) }}" class="btn btn-inverse-warning" title="Edit"> <i data-feather="edit"></i> </a>


/////////////////////////////////////////////////////////////////////////////////////////////////

◆コントローラーの編集◆

ディレクトリ
\app\Http\Controllers\Agent\AgentPropertyController.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

  public function AgentEditProperty($id)
  {

    $facilities = Facility::where('property_id', $id)->get();
    $property = Property::findOrFail($id);

    $type = $property->amenities_id;
    $property_ami = explode(',', $type);

    $multiImage = MultiImage::where('property_id', $id)->get();

    $propertytype = PropertyType::latest()->get();
    $amenities = Amenities::latest()->get();

    return view(
      'agent.property.edit_property',

      compact(
        'property',
        'propertytype',
        'amenities',
        'property_ami',
        'multiImage',
        'facilities'
      )
    );
  } // End Method 

  public function AgentUpdateProperty(Request $request)
  {

    $amen = $request->amenities_id;
    $amenites = implode(",", $amen);

    $property_id = $request->id;

    Property::findOrFail($property_id)->update([

      'ptype_id' => $request->ptype_id,
      'amenities_id' => $amenites,
      'property_name' => $request->property_name,
      'property_slug' => strtolower(str_replace(' ', '-', $request->property_name)),
      'property_status' => $request->property_status,

      'lowest_price' => $request->lowest_price,
      'max_price' => $request->max_price,
      'short_descp' => $request->short_descp,
      'long_descp' => $request->long_descp,
      'bedrooms' => $request->bedrooms,
      'bathrooms' => $request->bathrooms,
      'garage' => $request->garage,
      'garage_size' => $request->garage_size,

      'property_size' => $request->property_size,
      'property_video' => $request->property_video,
      'address' => $request->address,
      'city' => $request->city,
      'state' => $request->state,
      'postal_code' => $request->postal_code,

      'neighborhood' => $request->neighborhood,
      'latitude' => $request->latitude,
      'longitude' => $request->longitude,
      'featured' => $request->featured,
      'hot' => $request->hot,
      'agent_id' => Auth::user()->id,
      'updated_at' => Carbon::now(),

    ]);

    $notification = array(
      'message' => 'Propertyの更新が成功しました',
      'alert-type' => 'success'
    );

    return redirect()->route('agent.all.property')->with($notification);
  } // End Method 

  public function AgentUpdatePropertyThambnail(Request $request)
  {

    $pro_id = $request->id;
    $oldImage = $request->old_img;

    $image = $request->file('property_thambnail');
    $name_gen = hexdec(uniqid()) . '.' . $image->getClientOriginalExtension();
    Image::make($image)->resize(370, 250)->save('upload/property/thambnail/' . $name_gen);
    $save_url = 'upload/property/thambnail/' . $name_gen;

    if (file_exists($oldImage)) {
      unlink($oldImage);
    }

    Property::findOrFail($pro_id)->update([

      'property_thambnail' => $save_url,
      'updated_at' => Carbon::now(),
    ]);

    $notification = array(
      'message' => 'Property Image Thambnail Updated Successfully',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 

  public function AgentUpdatePropertyMultiimage(Request $request)
  {

    $imgs = $request->multi_img;

    foreach ($imgs as $id => $img) {
      $imgDel = MultiImage::findOrFail($id);
      unlink($imgDel->photo_name);

      $make_name = hexdec(uniqid()) . '.' . $img->getClientOriginalExtension();
      Image::make($img)->resize(770, 520)->save('upload/property/multi-image/' . $make_name);
      $uploadPath = 'upload/property/multi-image/' . $make_name;

      MultiImage::where('id', $id)->update([
        'photo_name' => $uploadPath,
        'updated_at' => Carbon::now(),
      ]);
    } // End Foreach 

    $notification = array(
      'message' => 'Property Multi Imageの更新が成功しました',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 

  public function AgentPropertyMultiimgDelete($id)
  {

    $oldImg = MultiImage::findOrFail($id);
    unlink($oldImg->photo_name);

    MultiImage::findOrFail($id)->delete();

    $notification = array(
      'message' => 'Property Multi Imageの削除が成功しました',
      'alert-type' => 'success'
    );

    return redirect()->back()->with($notification);
  } // End Method 

/////////////////////////////////////////////////////////////////////////////////////////////////

◆ビューの編集(遷移先)◆

ディレクトリ
\resources\views\agent\property\edit_property.blade.php

・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・

\resources\views\backend\property\edit_property.blade.phpを参考に
作成する

/////////////////////////////////////////////////////////////////////////////////

情報の更新、画像の更新、複数画像の更新と削除ができたらOK